@using Microsoft.AspNetCore.Mvc.TagHelpers
@model ProductDTO
@{
    ViewData["Title"] = "شراء الأن";
    // var visitorCount = ViewData["VisitorCount"];
    var isAuthenticated = User.Identity.IsAuthenticated;
}

<style>
    .product-image {
        width: 13rem !important;
    height: 13rem !important;
    /* object-fit: cover !important; */
    border-radius: 20px !important;
}

    #productCarousel {
    position: relative;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
}
.choiceBtn {
    font-size: 1.1rem !important;
}
</style>

<link rel="stylesheet" href="~/css/User/ViewProduct.css" />


<div class="container py-4 mt-5">

    <input id="productId" type="hidden" asp-for="@Model.Id" />
    <input type="hidden" id="colorChoiceName" data-avaliable="@(Model?.Colors?.Any())" />
    <input type="hidden" id="sizeChoiceName" data-avaliable="@(Model?.Sizes?.Any())" />
    <input type="hidden" id="combinationId" />

    <div class="row">
        <!-- Product Image and Carousel -->
        <div class="col-6 col-md-3">
            <div id="productCarousel" class="carousel slide" data-bs-ride="carousel">
                <div class="carousel-inner">
                    <div class="carousel-item active">
                        <img src="@((Model?.MainImageUrl != null && Model.MainImageUrl != "") ? Url.Content($"~/{ImagesPathes.Products}{Model.MainImageUrl}") : Url.Content($"~{ImagesPathes.DefaultImage}"))" class="d-block w-100 product-image" alt="Product Image">
                    </div>
                    @if (Model?.ProductImages != null)
                    {
                        foreach (var image in Model?.ProductImages)
                        {
                            @if (image.ImageUrl != Model?.MainImageUrl)
                            {

                                <div class="carousel-item">
                                    <img src="@Url.Content($" /{ImagesPathes.Products}{image.ImageUrl}")" class="d-block w-100 product-image product-img" alt="Product Image">
                                </div>
                            }
                        }
                    }
                </div>
                <button class="carousel-control-prev" type="button" data-bs-target="#productCarousel" data-bs-slide="prev">
                    <span class="carousel-control-prev-icon" aria-hidden="true"></span>
                    <span class="visually-hidden">Previous</span>
                </button>
                <button class="carousel-control-next" type="button" data-bs-target="#productCarousel" data-bs-slide="next">
                    <span class="carousel-control-next-icon" aria-hidden="true"></span>
                    <span class="visually-hidden">Next</span>
                </button>
            </div>

            <!-- Thumbnails -->
            <div class="d-flex justify-content-center mt-2 overflow-auto thumbnail-container d-none">
                @if (Model?.ProductImages != null)
                {
                    foreach (var image in Model?.ProductImages)
                    {
                        <img src="@Url.Content($" /{ImagesPathes.Products}{image.ImageUrl}")" class="img-thumbnail me-2 thumbnail" alt="Product Image">
                    }
                }
            </div>

        </div>

        <!-- Product Details -->
        <!-- Product Details -->
        <div class="col-6 col-md-9">
            <h2 class="cairo-extra-bold mt-3 mt-md-2">@Model?.ArbName</h2>
            <div class="d-flex align-items-center mb-2">
                <p class="d-none orderItemPrice">@Model?.DiscountPrice</p>
                <p class=" mt-2 mt-md-0 mb-0 me-1 DiscountPrice  purpleText fw-bold">@Model?.DiscountPrice جنيه مصري <br /> بدلا من <del class="originalPrice">@Model?.Price</del> </p>
                @* @if (Model.FreeShipping)
                {
                    <button class="btn btn-sm text-white ShippingButton me-3 me-md-5"><img src="/img/hot.png" class="fireIcon" /> شحن مجاني </button>
                } *@
            </div>


            @* <div class="rating mb-3">
                <span class="text-warning">&#9733;&#9733;&#9733;&#9733;&#9734;</span> (327 تقييم)
            </div> *@
            
                    <div class="col-12 mt-2 d-flex align-items-center mb-2 ">
                        <button class="btn btn-outline-secondary plusandmins " onclick="decreaseQuantity(this);checkAvailability()">-</button>
                        <input type="number" id="quantityInput" class="form-control text-center mx-2 quantity-input" value="1" min="1">
                        <button class="btn btn-outline-secondary plusandmins" onclick="increaseQuantity(this);checkAvailability()">+</button>
                    </div>

            <div id="choicesDiv">
                <div class="row mb-3">
                    @if (Model != null && Model.Colors != null && Model.Colors.Any())
                    {
                        <div class="col purpleText cairo-extra-bold colorChoice">
                            اللون:
                            @if (Model?.Colors != null && Model?.Colors.Count() > 0)
                            {
                                foreach (var color in Model.Colors)
                                {
                                    var imageUrl = Model.ProductVariableValues.Where(c => c.Value == color).FirstOrDefault()?.ImageUrl;
                                    <button class="btn btn-outline-secondary btn-sm py-2 px-2 px-md-3 choiceBtn" onclick="setImage('@imageUrl'); setColorChoice(this)">@color</button>
                                }
                            }
                        </div>
                    }
                </div>

                <div class="row mb-3 align-items-center">
                    @if (Model != null && Model.Sizes != null && Model.Sizes.Any())
                    {
                        <div class="col purpleText cairo-extra-bold sizeChoice">
                            المقاس:
                            @if (Model?.Sizes != null && Model?.Sizes.Count() > 0)
                            {
                                foreach (var size in Model.Sizes)
                                {
                                    <button class="btn btn-outline-secondary btn-sm py-2 px-3 choiceBtn" onclick="setSizeChoice(this);">@size</button>
                                }
                            }
                        </div>
                    }

                </div>
            </div>
            <!-- Options -->
            @* <div class="row mb-3">
                <div class="col-6 purpleText cairo-extra-bold">
                    القسم:
                    @if (Model?.Categories != null && Model?.Categories.Count() > 0)
                    {
                        <strong>@Model?.Categories?.FirstOrDefault().Category?.Name</strong>
                    }
                </div>
                <div class="col-6 purpleText cairo-extra-bold">النوع: <strong>@Model?.Manufacturing?.Name</strong></div>

            </div> *@

            @* <p>
                @Html.Raw(Model?.ArbDescription)
                <br />
            </p> *@

            <h6 id="NotAvaliableError" class="d-none text-danger text-center">هذا المقاس غير متوفر برجاء اختيار مقاس او لون اخر </h6>
            <h6 id="ChooseError" class="d-none text-danger text-center">يجب اختيار اللون و المقاس اولا</h6>
            <h6 id="colorChooseError" class="d-none text-danger text-center">يجب اختيار اللون</h6>
            <h6 id="sizeChooseError" class="d-none text-danger text-center">يجب اختيار المقاس </h6>



            <div class="d-flex">
                @if (Model?.StockCount > 1)
                {
                    @* <button type="button" class="btn btn-warning me-2 m-3 flex-grow-1 gradientButton fw-bold py-2 shadow-lg" onclick="setOrderNowData()"> <img src="/img/hot.png" class="fireIcon" /> شراء الآن</button> *@
                }
                else
                {
                    <button class="btn btn-danger me-2 m-3 flex-grow-1">هذا المنتج غير متوفر</button>
                }
            </div>

        </div>
    </div>




    <section id="orderNowSection" class="container my-5 border rounded py-3 px-4">
        <h5 class="section-title">بيانات الشحن</h5>
        <hr> <!-- Line under the header -->
        <div id="shipping" class="tab-pane ">
            <h6 id="AllFildsRequiredError" class="text-danger d-none">أكمل الحقول المطلوبة</h6>
            <h6 id="PhoneNumberError" class="text-danger d-none">رقم الهاتف غير صحيح</h6>
            <!-- Radio Buttons for Address Selection -->
            <div class="mb-3 cairo-bold">

                @if (Model != null && Model.UserAddressDTOs != null && Model.UserAddressDTOs.Count() > 0)
                {
                    foreach (var address in Model.UserAddressDTOs)
                    {
                        <div class="form-check d-flex align-items-center mb-2">
                            <input class="form-check-input ms-2" type="radio" name="addressOption" onclick="getAddressDetails(@address.Id)">
                            <label class="form-check-label" for="addressOption">
                                @address.Address
                            </label>
                        </div>
                    }
                }


                <div class="form-check d-flex align-items-center">
                    <input id="newAddressRadio" class="form-check-input ms-2" type="radio" name="addressOption" onclick="getAddressDetails(0)" @(isAuthenticated ? "" : "checked")>
                    <label class="form-check-label" for="newAddress">
                        التوصيل لعنوان جديد
                    </label>
                </div>

                <hr> <!-- Line under the header -->
                <!-- Shipping Form -->
                <div class="shipping-form">
                    <div class="row">
                        <!-- Full Name -->
                        <div class="col-md-6 mb-3">
                            <label for="firstName" class="form-label">
                                الاسم ثلاثي <span class="text-danger">*</span>
                            </label>
                            <input type="text" class="form-control" id="firstName"
                                   placeholder="ادخل الاسم ثلاثي" value="@ViewBag.UserFirstName" @(isAuthenticated ? "readonly" : "")>
                        </div>
                        <div class="col-md-6 mb-3 d-none">
                            <label for="lastName" class="form-label">
                                الاسم الثاني <span class="text-danger">*</span>
                            </label>
                            <input type="text" class="form-control" id="lastName"
                                   placeholder="الاسم الثاني" value="@ViewBag.UserLastName" @(isAuthenticated ? "readonly" : "")>
                        </div>
                        <!-- Phone Number -->
                        <div class="col-md-6 mb-3">
                            <label for="phoneNumber" class="form-label">
                                رقم التليفون <span class="text-danger">*</span>
                            </label>
                            <input type="text" class="form-control" id="phoneNumber"
                                   placeholder="201096633474+" value="@ViewBag.UserPhoneNumber" maxlength="12" @(isAuthenticated ? "readonly" : "")>
                        </div>
                        <!-- Second Number -->
                        <div class="col-md-6 mb-3">
                            <label for="phoneNumber2" class="form-label">
                                رقم أخر @* <span class="text-danger">*</span> *@
                            </label>
                            <input type="text" class="form-control" id="phoneNumber2"
                                   placeholder="201096633474+" maxlength="12">
                        </div>
                        <!-- Address -->
                        <div class="col-12 mb-3">
                            <label for="address" class="form-label">
                                العنوان <span class="text-danger">*</span>
                            </label>
                            <textarea class="form-control" id="address" rows="2"
                                      placeholder="العنوان"></textarea>
                        </div>
                        <!-- City and Region -->
                        <div class="col-md-6 mb-3">
                            <label for="governmentId" class="form-label">
                                المحافظة <span class="text-danger">*</span>
                            </label>
                            <select id="governmentId" asp-items="ViewBag.Governments" class="form-select select2" onchange="getRegions()">
                                <option selected disabled>-- اختر --</option>
                                <option value="-1">-- اخرى --</option>
                            </select>
                        </div>
                        <div class="col-md-6 mb-3">
                            <label for="regionId" class="form-label">
                                المنطقة @* <span class="text-danger">*</span> *@
                            </label>
                            <select id="regionId" asp-items="ViewBag.Regions" class="form-select select2 mt-2" onchange="checkRegion()">
                                <option value="" selected>-- اختر --</option>
                                <option value="-1">-- اخرى --</option>
                            </select>
                        </div>
                        <div class="row mb-4 d-none" id="newArea">
                            <div class="col-md-6">
                                <input id="GovernmentName" class="form-control mt-2  py-3 d-none" type="text" placeholder="ادخل المحافظة">
                            </div>
                            <div class="col-md-6">
                                <input id="RegionName" class="form-control mt-2  py-3 d-none" type="text" placeholder="ادخل المنطقة">
                            </div>
                        </div>
                        <!-- Notes -->
                        <div class="col-12 mb-3">
                            <label for="notes" class="form-label">ملاحظات (اختياري)</label>
                            <textarea class="form-control" id="notes" rows="2"
                                      placeholder="اكتب أي ملاحظات"></textarea>
                        </div>
                        <!-- Preferred Delivery Time -->
                        <div class="col-md-6 mb-3">
                            <label for="deliveryTimeFromHour" class="form-label">
                                موعد الاستلام المفضل (اختياري)
                                من
                            </label>
                            <div class="d-flex">
                                <!-- Hour input for deliveryTimeFrom -->
                                <input type="number" class="form-control" id="deliveryTimeFromHour" min="1" max="12" placeholder="ساعة">

                                <!-- Minute input for deliveryTimeFrom -->
                                @* <input type="number" class="form-control" id="deliveryTimeFromMinute" min="0" max="59" placeholder="دقيقة"> *@

                                <!-- AM/PM input for deliveryTimeFrom -->
                                <select class="form-control" id="deliveryTimeFromAMPM">
                                    <option value="ص">ص</option>
                                    <option value="م">م</option>
                                </select>
                            </div>
                        </div>

                        <div class="col-md-6 mb-3">
                            <label for="deliveryTimeToHour" class="form-label">إلى</label>
                            <div class="d-flex">
                                <!-- Hour input for deliveryTimeTo -->
                                <input type="number" class="form-control" id="deliveryTimeToHour" min="1" max="12" placeholder="ساعة">

                                <!-- Minute input for deliveryTimeTo -->
                                @* <input type="number" class="form-control" id="deliveryTimeToMinute" min="0" max="59" placeholder="دقيقة"> *@

                                <!-- AM/PM input for deliveryTimeTo -->
                                <select class="form-control" id="deliveryTimeToAMPM">
                                    <option value="ص">ص</option>
                                    <option value="م">م</option>
                                </select>
                            </div>
                        </div>

                        @if (!isAuthenticated)
                        {
                            <div class="col-md-6 mb-3 form-group d-none">
                                <label for="Password" class="form-label">
                                    الباسورد <span class="text-danger">*</span>
                                </label>
                                <input type="password" class="form-control" id="Password"
                                       placeholder="ادخل كلمة المرور" onchange="checkPassword()" value="123456">
                                <i id="togglePassword" class="fa-regular fa-eye eye-icon"></i>
                            </div>
                            <div class="col-md-6 mb-3 d-none">
                                <label for="ConfirmPassword" class="form-label">
                                    تأكيد الباسورد <span class="text-danger">*</span>
                                </label>
                                <input type="password" placeholder="تأكيد كلمة المرور" class="form-control" id="ConfirmPassword" onchange="checkPassword()" value="123456">
                            </div>
                            <h6 id="passwordMismatch" class="text-danger d-none">
                                كلمة المرور غير متطابقة.
                            </h6>
                        }

                    </div>
                    @* <button type="submit" class="btn btn-purple w-100 mt-4">حفظ بيانات الشحن</button> *@
                </div>


            </div>
            <h5 class="section-title">تفاصيل الدفع</h5>
            <hr> <!-- Line under the header -->
            <ul class="payment-options">
                @if (Model != null && Model.UserPaymentMethodDTOs != null && Model.UserPaymentMethodDTOs.Count() > 0)
                {
                    foreach (var paymentMethod in Model.UserPaymentMethodDTOs)
                    {
                        if (paymentMethod.PaymentMethodId == 1)
                        {
                            <li class="payment-option">
                                <label>
                                    <input type="radio" name="paymentMethod" value="@paymentMethod.Id" checked>
                                    @paymentMethod?.PaymentMethod?.Name
                                </label>
                                @* <img src="/img/Cash.png" alt="Visa"> *@
                            </li>
                        }
                        else
                        {

                            <li class="payment-option">
                                <label>
                                    <input type="radio" name="paymentMethod" value="@paymentMethod.Id">
                                    البطاقة المنتهية برقم @paymentMethod?.CardNumber?.Substring(paymentMethod.CardNumber.Length - 4)
                                </label>
                                <img src="/img/visa.png" alt="Visa">

                            </li>
                        }
                    }
                }
                else
                {
                    //user not registered, just add the cash method
                    <li class="payment-option">
                        <label>
                            <input type="radio" name="paymentMethod" value="1" checked>
                            الدفع كاش
                        </label>
                        @* <img src="/img/Cash.png" alt="Visa"> *@
                    </li>
                }

            </ul>
            <button id="orderNowBtn" type="button" data-offerid="" class="btn btn-primary w-100" onclick="setOrderNowData()">ارسال الطلب</button>
        </div>
    </section>
</div>



<script>
        function validatePhoneNumber(id) {
            var phoneNumberInput = $('#' + id);
            var phoneNumber = phoneNumberInput.val();

            // Remove any non-numeric characters
            phoneNumber = phoneNumber.replace(/\D/g, "");

            // If the phone number does not start with '2', add '2' to the beginning
            if (!phoneNumber.startsWith("2") && phoneNumber.length > 0) {
                phoneNumber = "2" + phoneNumber;
            }
            if (!phoneNumber.startsWith("20") && phoneNumber.length > 0) {
                phoneNumber = "20" + phoneNumber;
            }

            // Limit the phone number to 12 digits
            if (phoneNumber.length > 12) {
                phoneNumber = phoneNumber.slice(0, 12);
            }

            // Update the input field value
            phoneNumberInput.val(phoneNumber);

            // Check if the phone number is valid
            if (phoneNumber.length === 12 && phoneNumber.startsWith("20")) {
                return true; // Phone number is valid
            } else {
                return false; // Phone number is invalid
            }
        }


        function setOrderNowData() {
            var choiceDiv = $('#choicesDiv');
            var combinationId = $('#combinationId').val();
            var productId = $('#productId').val();
            var ChooseError = $('#ChooseError');
            var colorChooseError = $('#colorChooseError');
            var sizeChooseError = $('#sizeChooseError');
            var quantity = $('#quantityInput').val();
            var colorAvailable = $('#colorChoiceName').data('avaliable');
            var sizeAvailable = $('#sizeChoiceName').data('avaliable');
            var colorChoiceName = $('#colorChoiceName').val();
            var sizeChoiceName = $('#sizeChoiceName').val();

    @* if (quantity && combinationId && productId) { *@
                    if (quantity && productId && ((sizeAvailable === 'True' || colorAvailable === 'True') && combinationId) || (sizeAvailable === 'False' && colorAvailable === 'False')) {

                        if (!colorChooseError.hasClass("d-none")) {
                colorChooseError.addClass("d-none");
            }
            if (!sizeChooseError.hasClass("d-none")) {
                sizeChooseError.addClass("d-none");
            }
            if (!ChooseError.hasClass("d-none")) {
                ChooseError.addClass("d-none");
            }

                // Go to the section with id 'orderNowSection'
                var section = $('#orderNowSection');

                // Check if the section has the class 'd-none', and if so, remove it
                section.removeClass('d-none');

                $('#orderNowBtn').removeAttr('data-offerid');

                // Call updateSelect2 (assuming it's a jQuery function or jQuery-compatible)
                updateSelect2();

                // Scroll to the section
                // $('html, body').animate({
                //     scrollTop: section.offset().top
                // }, 500); // Scroll duration is set to 500ms (half a second)
                placeOrder();
            }
            else if (!combinationId) {
                    if (!colorChoiceName && !sizeChoiceName) {
                ChooseError.removeClass("d-none");
            if (!colorChooseError.hasClass("d-none")) {
                colorChooseError.addClass("d-none");
            }
            if (!sizeChooseError.hasClass("d-none")) {
                sizeChooseError.addClass("d-none");
            }
        } else if (!colorChoiceName) {
            colorChooseError.removeClass("d-none");
            if (!ChooseError.hasClass("d-none")) {
                ChooseError.addClass("d-none");
            }
            if (!sizeChooseError.hasClass("d-none")) {
                sizeChooseError.addClass("d-none");
            }
        } else if (!sizeChoiceName) {
            sizeChooseError.removeClass("d-none");
            if (!ChooseError.hasClass("d-none")) {
                ChooseError.addClass("d-none");
            }
            if (!colorChooseError.hasClass("d-none")) {
                colorChooseError.addClass("d-none");
            }
        }
        //Scroll to the section
                $('html, body').animate({
                    scrollTop: choiceDiv.offset().top - 100
                }, 500);
            }
        }
        

        function setOrderNowOfferData(button, offerId) {
            // Get the closest product-cards div using jQuery
            var productCards = $(button).closest('.product-cards');

            // Get all offerPiece divs within this product-cards using jQuery
            var offerPieces = productCards.find('.offerPiece');

            // Create an array to hold the combinationIds
            var combinationIds = [];

            // Flag to track if all combinationIds are valid
            var allCombinationIdsValid = true;

            // Loop through each offerPiece and check if all have combinationId value
            offerPieces.each(function () {
                var combinationId = $(this).find('.combinationId').val();
                var ChooseError = $(this).find('.ChooseError'); // Get the h6 with class ChooseError
                var specificChooseError = $(this).find('.specificChooseError'); // Get the h6 with class ChooseError
                var specificChooseErrorText = specificChooseError.find('.specificChooseErrorText');
                var combinationValues = $(this).find('.combinationValue'); // Get all combinationValue divs


                if (!combinationId) {
                    allCombinationIdsValid = false; // If any combinationId is invalid, mark as false
                    var errorCount = 0;

                     // Loop through each combinationValue div
            combinationValues.each(function () {
                var productVariableName = $(this).data('variable-name'); // Get the text of the productVariableName
                var btnPrimary = $(this).find('button.btn-primary'); // Find button with class btn-primary

                // If there's no btn-primary, mark as invalid and set specific error message
                if (btnPrimary.length === 0) {
                    errorCount++;
                    combinationIdValid = false; // Invalid combinationId
                    specificChooseErrorText.text(productVariableName); // Set the text in specificChooseErrorText
                }
            });
                if(errorCount >=2) {
                    //all not choosen
                    ChooseError.removeClass('d-none'); // Ensure the ChooseError element is visible
                    if(!specificChooseError.hasClass('d-none')){
                        specificChooseError.addClass('d-none');
                    }
                }

                   else if(errorCount == 1) {
                       //specific one
                       specificChooseError.removeClass('d-none'); // Show the specificChooseError
                       if(!ChooseError.hasClass('d-none')){
                           ChooseError.addClass('d-none');
                       }
                   }
                   else{

            if (!ChooseError.hasClass("d-none")) {
                ChooseError.addClass("d-none");
            }
            if (!specificChooseError.hasClass("d-none")) {
                specificChooseError.addClass("d-none");
            }
                   }

                } else {
                    combinationIds.push(combinationId); // Add to array if combinationId is valid
                    ChooseError.addClass('d-none'); // Ensure the ChooseError element is hidden
                }
            });

            // If not all combinationIds are valid, return
            if (!allCombinationIdsValid) {
                return;
            }

            // Go to the section with id 'orderNowSection'
            var section = $('#orderNowSection');

            // Check if the section has the class 'd-none', and if so, remove it
            section.removeClass('d-none');

            // Set the data-offerid attribute on the button with id 'orderNowBtn'
            $('#orderNowBtn').attr('data-offerid', offerId);

            // Call updateSelect2 (assuming it's a jQuery function or jQuery-compatible)
            updateSelect2();

            // Scroll to the section with smooth animation
            $('html, body').animate({
                scrollTop: section.offset().top
            }, 500); // Scroll duration is set to 500ms (half a second)
        }


        function getAddressDetails(id) {
            // If id is null, reset the inputs
            if (id === null || id === 0) {
                document.getElementById('address').value = '';        // Reset address input
                document.getElementById('regionId').value = 0;       // Reset region select
                document.getElementById('governmentId').value = 0;   // Reset government select
                return; // Exit the function if id is null or 0
            }

            // Otherwise, make the AJAX call to get the address details
            $.ajax({
                url: '@Url.Action("GetAddressDetails")',  // Update with your actual controller and action
                type: 'GET',
                data: { id: id },
                success: function (response) {
                    // If response is valid
                    if (response && response.address && response.governmentId && response.regions) {
                        // Set the address
                        document.getElementById('address').value = response.address;

                        // Set the governmentId
                        document.getElementById('governmentId').value = response.governmentId;

                        // Update the region dropdown list with the new regions
                        var regionSelect = document.getElementById('regionId');
                        regionSelect.innerHTML = ''; // Clear existing options
                        response.regions.forEach(function (region) {
                            var option = document.createElement('option');
                            option.value = region.id;
                            option.text = region.name;
                            regionSelect.appendChild(option);
                        });

                        // Set the regionId as selected
                        if (response.regionId) {
                            regionSelect.value = response.regionId;
                        }

                        updateSelect2();
                    }
                },
                error: function () {
                    alert("An error occurred while fetching address details.");
                }
            });
        }

        function getRegions() {
            if (!$('#GovernmentError').hasClass('d-none')) {
                // If it doesn't have the class, add it
                $('#GovernmentError').addClass('d-none');
            }
            if (!$('#RegionError').hasClass('d-none')) {
                // If it doesn't have the class, add it
                $('#RegionError').addClass('d-none');
            }
            var governmentId = $('#governmentId').val();
            var regionsSelect = $('#regionId'); // Get the RegionId select element
            // Clear existing options in the RegionId select
            regionsSelect.empty();
            regionsSelect.append(
                $('<option></option>').val(0).text('-- اختر --').attr('disabled', 'disabled').attr('selected', 'selected'),
                $('<option></option>').val(-1).text('-- اخرى --')
            );

            updateSelect2();

            if (governmentId == -1) {
                $("#newArea").removeClass("d-none");
                $("#GovernmentName").removeClass("d-none");
                $("#RegionName").removeClass("d-none");
                regionsSelect.val(-1);
                updateSelect2();

            }
            else {
                $("#newArea").addClass("d-none");
                $("#GovernmentName").addClass("d-none");
                $("#RegionName").addClass("d-none");


                $.ajax({
                    url: '@Url.Action("GetRegions")',
                    type: 'GET',
                    data: { governmentId: governmentId }, // Send governmentId as a parameter
                    traditional: true, // Ensure that jQuery sends the array as multiple parameters
                    success: function (response) {



                        // Loop through the response data and add each region to the select element
                        $.each(response.regions, function (index, region) {

                            regionsSelect.append(
                                $('<option></option>').val(region.id).text(region.text)
                            );
                        });

                        // Reinitialize or refresh Select2 (if using Select2)
                        updateSelect2();
                    },
                    error: function (xhr, status, error) {
                        console.error("Error fetching regions:", error);
                    }
                });
            }


        }

        function checkRegion() {
            var regionValue = $("#regionId").val();

            if (regionValue == -1) {
                $("#newArea").removeClass("d-none");
                $("#RegionName").removeClass("d-none");
            }
            else {
                $("#newArea").addClass("d-none");
                $("#RegionName").addClass("d-none");
            }
        }

        function checkPassword() {
            var password = document.getElementById("Password").value;
            var confirmPassword = document.getElementById("ConfirmPassword").value;
            var passwordMismatchMessage = document.getElementById("passwordMismatch");

            // Check if the passwords match
            if (password !== confirmPassword) {
                passwordMismatchMessage.classList.remove("d-none"); // Show the message
            } else {
                passwordMismatchMessage.classList.add("d-none"); // Hide the message
            }
        }


        function setImage(imageUrl) {
            // Get the carousel inner container
            const carouselInner = document.querySelector('#productCarousel .carousel-inner');

            // Log the passed imageUrl for debugging
            console.log("Image URL passed:", imageUrl);

            // Remove active class from all carousel items
            carouselInner.querySelectorAll('.carousel-item').forEach((item) => {
                item.classList.remove('active');
            });

            // Loop through all carousel items and check for a match
            carouselInner.querySelectorAll('.carousel-item img').forEach((img) => {
                const imgUrl = img.src;  // Get the full image URL from the carousel
                const imageNameFromCarousel = imgUrl.substring(imgUrl.lastIndexOf('/') + 1);  // Extract file name from the URL

                // Trim both imageNameFromCarousel and imageUrl to ignore spaces at the beginning and end
                const trimmedImageName = imageNameFromCarousel.trim();
                const trimmedImageUrl = imageUrl.trim();

                // Compare the trimmed values
                if (trimmedImageName === trimmedImageUrl) {
                    // If a match is found, set the item as active
                    img.closest('.carousel-item').classList.add('active');
                }
            });
        }



        // Start countdown with a given duration in seconds (e.g., 2 days = 172800 seconds)


        function increaseQuantity(button) {
            const input = button.previousElementSibling;
            const currentValue = parseInt(input.value);
            input.value = currentValue + 1;
        }

        function decreaseQuantity(button) {
            const input = button.nextElementSibling;
            const currentValue = parseInt(input.value);
            if (currentValue > 1) {
                input.value = currentValue - 1;
            }
        }



        document.addEventListener("DOMContentLoaded", (event) => {


            document.querySelectorAll('.thumbnail').forEach((thumbnail) => {
                thumbnail.addEventListener('click', function () {
                    const carouselInner = document.querySelector('#productCarousel .carousel-inner');
                    const imageSrc = this.src;

                    // Remove active class from all carousel items
                    carouselInner.querySelectorAll('.carousel-item').forEach((item) => {
                        item.classList.remove('active');
                    });

                    // Check if an item with the clicked image already exists
                    let existingItem = Array.from(carouselInner.children).find(
                        (item) => item.querySelector('img').src === imageSrc
                    );

                    if (!existingItem) {
                        // Create new carousel item
                        const newItem = document.createElement('div');
                        newItem.classList.add('carousel-item', 'active');
                        newItem.innerHTML = `<img src="${imageSrc}" class="d-block w-100 product-image" alt="Product Image">`;
                        carouselInner.appendChild(newItem);
                    } else {
                        // Activate the existing item
                        existingItem.classList.add('active');
                    }
                });
            });



            document.querySelector('#productCarousel').addEventListener('slid.bs.carousel', function () {
    @* console.log('Carousel has finished sliding to the next item!'); *@

                                                                    // Get all carousel items
                                                                    const carouselItems = document.querySelectorAll('#productCarousel .carousel-item');

                // Find the currently active item
                const activeItem = document.querySelector('#productCarousel .carousel-item.active');

                // Ensure only the active item has the active class
                carouselItems.forEach((item) => {
                    if (item !== activeItem) {
                        item.classList.remove('active'); // Remove active class from non-active items
                    }
                });

                // Log the current active item
    @* console.log('Current active item:', activeItem); *@
                                                                });

            document.querySelectorAll('.offer-banner').forEach((banner) => {
                banner.addEventListener('click', function () {
                    // Find the associated product-cards div
                    const productCards = banner.nextElementSibling; // Assuming it's the next sibling div

                    // Toggle the d-none class to show/hide the product-cards div
                    productCards.classList.toggle('d-none');

                    // Toggle the arrow direction (change up/down icon)
                    const arrow = banner.querySelector('.toggle-arrow');
                    if (productCards.classList.contains('d-none')) {
                        // If hidden, show down arrow
    @* arrow.innerHTML = '&#x2193;'; // Down arrow *@
                            arrow.querySelector('i').style.transform = 'rotate(0deg)';
                    } else {
                        // If visible, show up arrow
    @* arrow.innerHTML = '&#x2191;'; // Up arrow *@
                            arrow.querySelector('i').style.transform = 'rotate(180deg)';
                    }
                    arrow.querySelector('i').style.transition = 'transform 0.3s ease';
                });
            });

        });


        function setColorChoice(button) {
            // Remove the btn-primary and text-white classes from all buttons inside .colorChoice
            var buttons = document.querySelectorAll('.colorChoice button');
            buttons.forEach(function (btn) {
                btn.classList.remove('btn-primary', 'text-white');
            });

            // Add the btn-primary and text-white classes to the clicked button
            button.classList.add('btn-primary', 'text-white');

            // Set the value of the input with id colorChoiceName to the text of the clicked button
            var colorChoiceNameInput = document.getElementById('colorChoiceName');
            colorChoiceNameInput.value = button.innerText;


            checkAvailability();
        }

        function setSizeChoice(button) {
            // Remove the btn-primary and text-white classes from all buttons inside .sizeChoice
            var buttons = document.querySelectorAll('.sizeChoice button');
            buttons.forEach(function (btn) {
                btn.classList.remove('btn-primary', 'text-white');
            });

            // Add the btn-primary and text-white classes to the clicked button
            button.classList.add('btn-primary', 'text-white');

            // Set the value of the input with id sizeChoiceName to the text of the clicked button
            var sizeChoiceNameInput = document.getElementById('sizeChoiceName');
            sizeChoiceNameInput.value = button.innerText;

            checkAvailability();
        }

    @* function checkAvailability() {
            // Get values of the inputs
            var quantity = document.getElementById('quantityInput').value;
            var color = document.getElementById('colorChoiceName').value;
            var size = document.getElementById('sizeChoiceName').value;
            var productId = document.getElementById('productId').value;
            var ChooseError = document.getElementById('ChooseError');
            var combinationIdInput = document.getElementById('combinationId');

            // Check if all required inputs have values
            if (quantity && color && size && productId) {
            // Make an AJAX call to check availability
            $.ajax({
            url: '@Url.Action("CheckAvailability")', // Adjust this URL as necessary
            type: 'POST',
            data: {
            quantity: quantity,
            color: color,
            size: size,
            productId: productId
            },
            success: function (response) {
            // Check the response and show or hide the error message
            var noAvailableError = document.getElementById('NotAvaliableError'); // Assuming this is the input to store the combination ID

            if (response === false) {
            // Show the error message if availability is false
            noAvailableError.classList.remove('d-none');
            combinationIdInput.value = ""; // Set the combinationId input to an empty string if not available
            } else {
            // Hide the error message if availability is true
            noAvailableError.classList.add('d-none');
            // Set the combinationId input to the returned combinationId if available
            combinationIdInput.value = response;

            if (!ChooseError.classList.contains('d-none')) {
            ChooseError.classList.add('d-none');
            }
            }
            },
            error: function () {
            console.error('An error occurred while checking availability.');
            }
            });
            }
            else if (!combinationIdInput.value) {
            ChooseError.classList.remove('d-none');
            }
            } *@

            function checkAvailability() {
                // Get values of the inputs
                var quantity = $('#quantityInput').val();
                var color = $('#colorChoiceName').val();
                var size = $('#sizeChoiceName').val();
                var productId = $('#productId').val();
                var colorAvailable = $('#colorChoiceName').data('avaliable');
                var sizeAvailable = $('#sizeChoiceName').data('avaliable');
                var ChooseError = $('#ChooseError');
                var combinationIdInput = $('#combinationId');
            var colorChooseError = $('#colorChooseError');
            var sizeChooseError = $('#sizeChooseError');
            var colorChoiceName = $('#colorChoiceName').val();
            var sizeChoiceName = $('#sizeChoiceName').val();

                // Check if all required inputs have values
    @* if (quantity && color && size && productId) { *@
                                    if (quantity && productId &&
                    ((colorAvailable === 'True' && color) || (colorAvailable === 'False' && !color)) &&
                    ((sizeAvailable === 'True' && size) || (sizeAvailable === 'False' && !size))) {
                    // Make an AJAX call to check availability
                    $.ajax({
                        url: '@Url.Action("CheckAvailability")', // Adjust this URL as necessary
                        type: 'POST',
                        data: {
                            quantity: quantity,
                            color: color,
                            size: size,
                            productId: productId
                        },
                        success: function (response) {
                            // Check the response and show or hide the error message
                            var noAvailableError = $('#NotAvaliableError'); // Assuming this is the input to store the combination ID

                            if (response === false) {
                                // Show the error message if availability is false
                                combinationIdInput.val(""); // Set the combinationId input to an empty string if not available
                                if (sizeAvailable === 'True' || colorAvailable === 'True') {
                                    noAvailableError.removeClass('d-none');
                                }
                            } else {
                                // Hide the error message if availability is true
                                noAvailableError.addClass('d-none');
                                // Set the combinationId input to the returned combinationId if available
                                combinationIdInput.val(response);

                                if (!ChooseError.hasClass('d-none')) {
                                    ChooseError.addClass('d-none');
                                }
                                if (!colorChooseError.hasClass('d-none')) {
                                    colorChooseError.addClass('d-none');
                                }
                                if (!sizeChooseError.hasClass('d-none')) {
                                    sizeChooseError.addClass('d-none');
                                }
                            }
                        },
                        error: function () {
                            console.error('An error occurred while checking availability.');
                        }
                    });
                }
                else if (!combinationIdInput.val()) {
                    if (!colorChoiceName && !sizeChoiceName) {
            ChooseError.removeClass("d-none");
            if (!colorChooseError.hasClass("d-none")) {
                colorChooseError.addClass("d-none");
            }
            if (!sizeChooseError.hasClass("d-none")) {
                sizeChooseError.addClass("d-none");
            }
        } else if (!colorChoiceName) {
            colorChooseError.removeClass("d-none");
            if (!ChooseError.hasClass("d-none")) {
                ChooseError.addClass("d-none");
            }
            if (!sizeChooseError.hasClass("d-none")) {
                sizeChooseError.addClass("d-none");
            }
        } else if (!sizeChoiceName) {
            sizeChooseError.removeClass("d-none");
            if (!ChooseError.hasClass("d-none")) {
                ChooseError.addClass("d-none");
            }
            if (!colorChooseError.hasClass("d-none")) {
                colorChooseError.addClass("d-none");
            }
        }
                }
            }


        function placeOrder() {
            var section = $('#orderNowSection');
            var orderNowBtn = $('#orderNowBtn');
            var AllFildsRequiredError = $('#AllFildsRequiredError');
            var PhoneNumberError = $('#PhoneNumberError');
            var selectedPaymentMethod = $('input[name="paymentMethod"]:checked');
            var governmentId = $("#governmentId").val();
            var regionId = $("#regionId").val();
            var notes = $("#notes").val();
            var firstName = $("#firstName").val();
    @* var lastName = $("#lastName").val(); *@
                        var lastName = firstName;
               var phoneNumber = $("#phoneNumber").val();
               var phoneNumber2 = $("#phoneNumber2").val();
                    // var deliveryTimeFrom = $("#deliveryTimeFrom").val();
                    var deliveryTimeFrom = getDeliveryTimeFrom();
                    // var deliveryTimeTo = $("#deliveryTimeTo").val();
                    var deliveryTimeTo = getDeliveryTimeTo();
            var deliveryTimeTo = $("#deliveryTimeTo").val();
    @* var totalValue = $('#totalValue').text();
                var discountValue = $('#discountValue').text();
                var netAmountValue = $('#netAmountValue').text(); *@
                                    var newGovernmentValue = $('#GovernmentName').val();
            var newRegionValue = $('#RegionName').val();
            var addressValue = $('#address').val();
            var passwordValue = $('#Password').val();
            var isValid = true;
            var isValidPhoneNumber = validatePhoneNumber('phoneNumber');
            var isValidPhoneNumber2 = validatePhoneNumber('phoneNumber2');

            if (phoneNumber2.length == 0) {
                isValidPhoneNumber2 = true;
            } else if (!isValidPhoneNumber2) {
                isValid = false;
            }

            if (!isValidPhoneNumber) {
                isValid = false;
            }

            if(!isValidPhoneNumber || !isValidPhoneNumber2) {
                if (PhoneNumberError.hasClass('d-none')) {
                    PhoneNumberError.removeClass('d-none');
                }
                $('html, body').animate({
        scrollTop: section.offset().top
    }, 500);
            }
            else {
                if (!PhoneNumberError.hasClass('d-none')) {
                    PhoneNumberError.addClass('d-none');
                }
            }


            // Check if any of the required fields are missing
            if (!selectedPaymentMethod.length || !governmentId || !firstName || !lastName || !phoneNumber || !addressValue) {
                isValid = false;
            }

            if (governmentId == -1 && !newGovernmentValue) {
                isValid = false;
            }

            if (regionId == -1 && !newRegionValue) {
                isValid = false;
            }

            var isAuthenticated = @isAuthenticated.ToString().ToLower(); // True or false

            // If user is not authenticated, check the password field
            if (!isAuthenticated && !passwordValue) {
                isValid = false;
            }

            // If validation fails, show an error message
            if (!isValid) {
                // Make sure the error message is visible
                if (AllFildsRequiredError.hasClass('d-none')) {
                    AllFildsRequiredError.removeClass('d-none');
                }
                        $('html, body').animate({
        scrollTop: section.offset().top
    }, 500);
            } else {
                // Proceed with order submission logic if the form is valid
                // Hide the error message if form is valid
                if (!AllFildsRequiredError.hasClass('d-none')) {
                    AllFildsRequiredError.addClass('d-none');
                }

                // Check if the orderNowBtn has a data-offerid and its value
                var offerId = orderNowBtn.data('offerid');  // Retrieve the data-offerid attribute value

                if (offerId) {
                    // If offerId exists and has a value, call placeOfferOrder
                    placeOfferOrder(offerId);
                } else {
                    // Otherwise, call placeItemOrder
                    placeItemOrder();
                }
            }
        }

        function placeOfferOrder(offerId) {

            var button = $('.offerOrderNow[data-offerId="' + offerId + '"]');
            // Get the closest '.product-cards' element
            var productCards = button.closest('.product-cards');

            // Check if the button is found
            if (button.length > 0) {

            } else {
                console.log('Button with offerId ' + offerId + ' not found.');
                return null;  // Return null if button is not found
            }


            var selectedPaymentMethod = $('input[name="paymentMethod"]:checked').val();  // Get the selected payment method value
            var governmentId = $("#governmentId").val();
            var regionId = $("#regionId").val();
            var notes = $("#notes").val();
            var firstName = $("#firstName").val();
    @* var lastName = $("#lastName").val(); *@
                        var lastName = firstName;
            var phoneNumber = $("#phoneNumber").val();
            var phoneNumber2 = $("#phoneNumber2").val();
                    // var deliveryTimeFrom = $("#deliveryTimeFrom").val();
                    var deliveryTimeFrom = getDeliveryTimeFrom();
                    // var deliveryTimeTo = $("#deliveryTimeTo").val();
                    var deliveryTimeTo = getDeliveryTimeTo();
            // Get the .offerOrderPrice inside the productCards element
            var totalValue = productCards.find('.offerOrderPrice').first().text();
            var discountValue = productCards.find('.offerOrderPrice').first().text();
            var netAmountValue = productCards.find('.offerOrderPrice').first().text();
            var newGovernmentValue = $('#GovernmentName').val();
            var newRegionValue = $('#RegionName').val();
            var address = $('#address').val();
            var passwordValue = $('#Password').val();
            var productId = $('#productId').val();


            // Get all offerPiece divs within this product-cards
            var offerPieces = productCards.find('.offerPiece');

            // Create an array to hold the combinationIds
            var combinationIds = [];

            // Loop through each offerPiece and check if all have combinationId value
            var allCombinationIdsValid = true;  // Flag to track if all combinationIds are valid
    @*  offerPieces.each(function () {
                var offerPiece = $(this);  // jQuery object for the current offerPiece

                var combinationId = offerPiece.find('.combinationId').val();  // Using jQuery to get the value
                var ChooseError = offerPiece.find('.ChooseError');  // jQuery to find the ChooseError element

                if (!combinationId) {
                    allCombinationIdsValid = false;  // If any combinationId is invalid, mark as false
                    if (ChooseError.hasClass('d-none')) {
                        ChooseError.removeClass('d-none');  // Ensure the ChooseError element is visible
                    }
                } else {
                    combinationIds.push(combinationId);  // Add to array if combinationId is valid
                    if (!ChooseError.hasClass('d-none')) {
                        ChooseError.addClass('d-none');  // Ensure the ChooseError element is hidden
                    }
                }
            }); *@
             offerPieces.each(function () {
                var combinationId = $(this).find('.combinationId').val();
                var ChooseError = $(this).find('.ChooseError'); // Get the h6 with class ChooseError
                var specificChooseError = $(this).find('.specificChooseError'); // Get the h6 with class ChooseError
                var specificChooseErrorText = specificChooseError.find('.specificChooseErrorText');
                var combinationValues = $(this).find('.combinationValue'); // Get all combinationValue divs


                if (!combinationId) {
                    allCombinationIdsValid = false; // If any combinationId is invalid, mark as false
                    var errorCount = 0;

                     // Loop through each combinationValue div
            combinationValues.each(function () {
                var productVariableName = $(this).data('variable-name'); // Get the text of the productVariableName
                var btnPrimary = $(this).find('button.btn-primary'); // Find button with class btn-primary

                // If there's no btn-primary, mark as invalid and set specific error message
                if (btnPrimary.length === 0) {
                    errorCount++;
                    combinationIdValid = false; // Invalid combinationId
                    specificChooseErrorText.text(productVariableName); // Set the text in specificChooseErrorText
                }
            });
                if(errorCount >=2) {
                    //all not choosen
                    ChooseError.removeClass('d-none'); // Ensure the ChooseError element is visible
                    if(!specificChooseError.hasClass('d-none')){
                        specificChooseError.addClass('d-none');
                    }
                }

                   else if(errorCount == 1) {
                       //specific one
                       specificChooseError.removeClass('d-none'); // Show the specificChooseError
                       if(!ChooseError.hasClass('d-none')){
                           ChooseError.addClass('d-none');
                       }
                   }
                   else{

            if (!ChooseError.hasClass("d-none")) {
                ChooseError.addClass("d-none");
            }
            if (!specificChooseError.hasClass("d-none")) {
                specificChooseError.addClass("d-none");
            }
                   }

                } else {
                    combinationIds.push(combinationId); // Add to array if combinationId is valid
                    ChooseError.addClass('d-none'); // Ensure the ChooseError element is hidden
                }
            });


            // If any combinationId is missing, show an error message and stop the process
            if (!allCombinationIdsValid) {
                return;
            }

            // Perform the AJAX request to submit the order
            $.ajax({
                url: '@Url.Action("PlaceOfferOrder")', // Adjust this URL to point to the appropriate controller and action
                type: 'POST',
                data: {
                    paymentMethodId: selectedPaymentMethod,
                    governmentId: governmentId,
                    regionId: regionId,
                    notes: notes,
                    firstName: firstName,
                    lastName: lastName,
                    phoneNumber: phoneNumber,
                    phoneNumber2: phoneNumber2,
                    deliveryTimeFrom: deliveryTimeFrom,
                    deliveryTimeTo: deliveryTimeTo,
                    totalValue: totalValue,
                    discountValue: discountValue,
                    netAmountValue: netAmountValue,
                    newGovernmentValue: newGovernmentValue,
                    newRegionValue: newRegionValue,
                    address: address,
                    passwordValue: passwordValue,
                    productId: productId,
                    combinationIds: combinationIds, // Pass the array of combinationIds
                    offerId: offerId
                },
                success: function (response) {
                    // If the server returns true, show a success message and redirect
                    if (response.success) {
                        window.location.href = '/User/Orders/OrderConfirmation';
                    } else {
                        alert("حدث خطأ أثناء تسجيل الاوردر.");
                    }
                },
                error: function () {
                    console.error('An error occurred while placing the order.');
                }
            });
        }

        function placeItemOrder() {
            var selectedPaymentMethod = $('input[name="paymentMethod"]:checked').val();  // Get the selected payment method value
            var governmentId = $("#governmentId").val();
            var regionId = $("#regionId").val();
            var notes = $("#notes").val();
            var firstName = $("#firstName").val();
    @* var lastName = $("#lastName").val(); *@
                        var lastName = firstName;
            var phoneNumber = $("#phoneNumber").val();
            var phoneNumber2 = $("#phoneNumber2").val();
                    // var deliveryTimeFrom = $("#deliveryTimeFrom").val();
                    var deliveryTimeFrom = getDeliveryTimeFrom();
                    // var deliveryTimeTo = $("#deliveryTimeTo").val();
                    var deliveryTimeTo = getDeliveryTimeTo();
            var totalValue = $('.orderItemPrice').text();
            var discountValue = $('.orderItemPrice').text();
            var netAmountValue = $('.orderItemPrice').text();
            var newGovernmentValue = $('#GovernmentName').val();
            var newRegionValue = $('#RegionName').val();
            var address = $('#address').val();
            var passwordValue = $('#Password').val();

            // Assuming you also want to pass quantity and combinationId
            var quantity = $('#quantityInput').val();
            var combinationId = $('#combinationId').val();
            var productId = $('#productId').val();

            // Perform the AJAX request to submit the order
            $.ajax({
                url: '@Url.Action("PlaceItemOrder")', // Adjust this URL to point to the appropriate controller and action
                type: 'POST',
                data: {
                    paymentMethodId: selectedPaymentMethod,
                    governmentId: governmentId,
                    regionId: regionId,
                    notes: notes,
                    firstName: firstName,
                    lastName: lastName,
                    phoneNumber: phoneNumber,
                    phoneNumber2: phoneNumber2,
                    deliveryTimeFrom: deliveryTimeFrom,
                    deliveryTimeTo: deliveryTimeTo,
                    totalValue: totalValue,
                    discountValue: discountValue,
                    netAmountValue: netAmountValue,
                    newGovernmentValue: newGovernmentValue,
                    newRegionValue: newRegionValue,
                    address: address,
                    passwordValue: passwordValue,
                    quantity: quantity,
                    combinationId: combinationId,
                    productId: productId
                },
                success: function (response) {
                    // If the server returns true, show a success message and redirect
                    if (response.success) {
                        window.location.href = '/User/Orders/OrderConfirmation';
                    } else {
                        alert("حدث خطأ أثناء تسجيل الاوردر.");
                    }
                },
                error: function () {
                    console.error('An error occurred while placing the order.');
                }
            });
        }



        function AddToCart() {

    @* var userLoggedIn = @User?.Identity?.IsAuthenticated.ToString().ToLower();

                if (userLoggedIn == false) {
                // Redirect to the login page if the user is not logged in
                window.location.href = '/Identity/Account/Login';
                return; // Stop execution of the function if the user is not logged in
                } *@

                                                            // Get values of the inputs
                                                            var quantity = document.getElementById('quantityInput').value;
            var combinationId = document.getElementById('combinationId').value;
            var productId = document.getElementById('productId').value;
            var ChooseError = $('#ChooseError');
    @* var ChooseError = document.getElementById('ChooseError'); *@
            var colorChooseError = $('#colorChooseError');
            var sizeChooseError = $('#sizeChooseError');
            var colorChoiceName = $('#colorChoiceName').val();
            var sizeChoiceName = $('#sizeChoiceName').val();

            // Check if all required inputs have values
            if (quantity && combinationId && productId) {
                ChooseError.classList.add("d-none");
                // Make an AJAX call to add the product to the cart
                $.ajax({
                    url: '@Url.Action("AddToCart")', // Adjust this URL as necessary
                    type: 'POST',
                    data: {
                        quantity: quantity,
                        combinationId: combinationId,
                        productId: productId
                    },
                    success: function (response) {
                        // If the server returns true, show a success message
                        if (response === true) {
    @* alert("Added to cart"); *@
                                $('#addedToCartModal').modal('show');
                        } else {
                            alert("حدث خطأ أثناء الاضافة للعربة.");
                        }
                    },
                    error: function () {
                        console.error('An error occurred while adding the item to the cart.');
                    }
                });
            }
            else if (!combinationId) {
                //ChooseError.classList.remove("d-none");
                if (!colorChoiceName && !sizeChoiceName) {
            ChooseError.removeClass("d-none");
            if (!colorChooseError.hasClass("d-none")) {
                colorChooseError.addClass("d-none");
            }
            if (!sizeChooseError.hasClass("d-none")) {
                sizeChooseError.addClass("d-none");
            }
        } else if (!colorChoiceName) {
            colorChooseError.removeClass("d-none");
            if (!ChooseError.hasClass("d-none")) {
                ChooseError.addClass("d-none");
            }
            if (!sizeChooseError.hasClass("d-none")) {
                sizeChooseError.addClass("d-none");
            }
        } else if (!sizeChoiceName) {
            sizeChooseError.removeClass("d-none");
            if (!ChooseError.hasClass("d-none")) {
                ChooseError.addClass("d-none");
            }
            if (!colorChooseError.hasClass("d-none")) {
                colorChooseError.addClass("d-none");
            }
        }
            }
            else {
                var notAvailableError = offerPiece.querySelector('.NotAvaliableError');
                notAvailableError.classList.remove('d-none');
            }
        }


        //For offer
        function setCombinationValue(clickedButton) {
            // Get the parent div with the class "combinationValue"
            var combinationValueDiv = clickedButton.closest('.combinationValue');

            // Get all buttons inside the parent div
            var buttons = combinationValueDiv.querySelectorAll('button');

            // Loop through all buttons and remove the "btn-primary" and "text-white" classes
            buttons.forEach(function (button) {
                button.classList.remove('btn-primary', 'text-white');
            });

            // Add the "btn-primary" and "text-white" classes to the clicked button
            clickedButton.classList.add('btn-primary', 'text-white');

            checkPieceAvaliability(clickedButton);
        }


        function checkPieceAvaliability(clickedButton) {
            // Find the closest parent div with the class 'offerPiece' of the clicked button
            var offerPiece = clickedButton.closest('.offerPiece'); // Get the closest .offerPiece container
            var ChooseError = offerPiece.querySelector('.ChooseError'); // Find .ChooseError inside the .offerPiece
            var specificChooseError = offerPiece.find('.specificChooseError'); // Get the h6 with class specificChooseError

            // Get all combinationValue divs within this offerPiece
            var combinationValues = offerPiece.querySelectorAll('.combinationValue');


            // Create an array to hold the selected values
            var selectedValues = [];

            // Check for each combinationValue if a button has the 'btn-primary' and 'text-white' classes
            var isValid = true;
            combinationValues.forEach(function (combinationValue) {
                var selectedButton = combinationValue.querySelector('.btn-primary.text-white');
                if (selectedButton) {
                    selectedValues.push(selectedButton.innerText); // Add the text of the selected button
                } else {
                    isValid = false; // If any combinationValue div does not have a selected button, mark it as invalid
                }
            });

            // If all combination values have been selected, make an AJAX call to check availability
            if (isValid) {
                var productId = document.getElementById('productId').value;

                if (ChooseError && !ChooseError.classList.contains('d-none')) {
                    ChooseError.classList.add('d-none'); // Ensure the ChooseError element is hidden
                }
                if (specificChooseError && !specificChooseError.classList.contains('d-none')) {
                       specificChooseError.classList.add('d-none'); // Ensure the ChooseError element is hidden
                }

                // Make the AJAX call to the CheckPieceAvailability action
                $.ajax({
                    url: '@Url.Action("CheckPieceAvailability")',
                    type: 'POST',
                    data: {
                        text: selectedValues,  // Send the selected values as an array
                        productId: productId
                    },
                    success: function (response) {
                        // Find the NotAvaliableError element within the same offerPiece
                        var notAvailableError = offerPiece.querySelector('.NotAvaliableError');
                        var combinationIdInput = offerPiece.querySelector('.combinationId');

                        if (response === false) {
                            // If the response is false, show the error message
                            if (notAvailableError) {
                                notAvailableError.classList.remove('d-none');
                            }
                            // Reset the combinationId input value
                            if (combinationIdInput) {
                                combinationIdInput.value = '';
                            }
                        } else {
                            // If the response is a valid combinationId, hide the error message
                            if (notAvailableError) {
                                notAvailableError.classList.add('d-none');
                            }
                            // Set the combinationId input value to the returned combinationId
                            if (combinationIdInput) {
                                combinationIdInput.value = response;  // Set the returned combinationId
                            }
                        }
                    },
                    error: function () {
                        console.error('An error occurred while checking availability.');
                    }
                });
            }
        }


    @* function AddOfferToCart(button) {

                                                            // Get the closest product-cards div
                                                            var productCards = button.closest('.product-cards');

            // Get all offerPiece divs within this product-cards
            var offerPieces = productCards.querySelectorAll('.offerPiece');

            // Create an array to hold the combinationIds
            var combinationIds = [];

            // Loop through each offerPiece and check if all have combinationId value
            var allCombinationIdsValid = true;  // Flag to track if all combinationIds are valid

            offerPieces.forEach(function (offerPiece) {
                var combinationId = offerPiece.querySelector('.combinationId').value;

                var ChooseError = $(this).find('.ChooseError'); // Get the h6 with class ChooseError
                var specificChooseError = $(this).find('.specificChooseError'); // Get the h6 with class ChooseError
                var specificChooseErrorText = specificChooseError.find('.specificChooseErrorText');
                if (!combinationId) {
                    allCombinationIdsValid = false; // If any combinationId is invalid, mark as false
                    if (ChooseError && ChooseError.classList.contains('d-none')) {
                        ChooseError.classList.remove('d-none'); // Ensure the ChooseError element is visible
                    }
                } else {
                    combinationIds.push(combinationId); // Add to array if combinationId is valid
                    if (ChooseError && !ChooseError.classList.contains('d-none')) {
                        ChooseError.classList.add('d-none'); // Ensure the ChooseError element is hidden
                    }
                }
            });

            // If any combinationId is missing, show an error message and stop the process
            if (!allCombinationIdsValid) {
                                                                    return;
            }

            // Get the productId from the input with id 'productId'
            var productId = document.getElementById('productId').value;

            // Get the offerId from the button's data-offerid attribute
            var offerId = button.getAttribute('data-offerid');

            // Make the AJAX call to the AddOfferToCart action with the combinationIds array
            $.ajax({
                url: '@Url.Action("AddOfferToCart")', // Adjust the URL as per your route
                type: 'POST',
                data: {
                    combinationIds: combinationIds, // Pass the array of combinationIds
                    productId: productId,
                    offerId: offerId
                },
                success: function (response) {
                    // If the response is true, show the modal with id 'addedToCartModal'
                    if (response === true) {
                        $('#addedToCartModal').modal('show');
                    } else {
                        alert("حدث خطأ أثناء إضافة العرض.");
                    }
                },
                error: function () {
                    console.error('An error occurred while adding the offer to the cart.');
                }
            });
        }
     *@

         function AddOfferToCart(button) {

            // Get the closest product-cards div using jQuery
            var productCards = $(button).closest('.product-cards');

            // Get all offerPiece divs within this product-cards using jQuery
            var offerPieces = productCards.find('.offerPiece');

            // Create an array to hold the combinationIds
            var combinationIds = [];

            // Flag to track if all combinationIds are valid
            var allCombinationIdsValid = true;  // Flag to track if all combinationIds are valid

            offerPieces.each(function () {
                var combinationId = $(this).find('.combinationId').val();  // Get the combinationId value

                var ChooseError = $(this).find('.ChooseError'); // Get the h6 with class ChooseError
                var specificChooseError = $(this).find('.specificChooseError'); // Get the h6 with class specificChooseError
                var specificChooseErrorText = specificChooseError.find('.specificChooseErrorText');
                var combinationValues = $(this).find('.combinationValue'); // Get all combinationValue divs

                if (!combinationId) {
                    allCombinationIdsValid = false; // If any combinationId is invalid, mark as false
    @* if (ChooseError && ChooseError.hasClass('d-none')) {
                        ChooseError.removeClass('d-none'); // Ensure the ChooseError element is visible
                    } *@
                        var errorCount = 0;

                        // Loop through each combinationValue div
               combinationValues.each(function () {
                      var productVariableName = $(this).data('variable-name'); // Get the text of the productVariableName
                   var btnPrimary = $(this).find('button.btn-primary'); // Find button with class btn-primary

                   // If there's no btn-primary, mark as invalid and set specific error message
                   if (btnPrimary.length === 0) {
                       errorCount++;
                       combinationIdValid = false; // Invalid combinationId
                       specificChooseErrorText.text(productVariableName); // Set the text in specificChooseErrorText
                   }
               });
                   if(errorCount >=2) {
                       //all not choosen
                       ChooseError.removeClass('d-none'); // Ensure the ChooseError element is visible
                       if(!specificChooseError.hasClass('d-none')){
                           specificChooseError.addClass('d-none');
                       }
                   }
                   else if(errorCount == 1) {
                       //specific one
                       specificChooseError.removeClass('d-none'); // Show the specificChooseError
                       if(!ChooseError.hasClass('d-none')){
                           ChooseError.addClass('d-none');
                       }
                   }
                   else{

            if (!ChooseError.hasClass("d-none")) {
                ChooseError.addClass("d-none");
            }
            if (!specificChooseError.hasClass("d-none")) {
                specificChooseError.addClass("d-none");
            }
                   }
                } else {
                    combinationIds.push(combinationId); // Add to array if combinationId is valid
                    if (ChooseError && !ChooseError.hasClass('d-none')) {
                        ChooseError.addClass('d-none'); // Ensure the ChooseError element is hidden
                    }
                }
            });

            // If any combinationId is missing, show an error message and stop the process
            if (!allCombinationIdsValid) {
                return;
            }


            // Get the productId from the input with id 'productId' using jQuery
            var productId = $('#productId').val();

            // Get the offerId from the button's data-offerid attribute using jQuery
            var offerId = $(button).data('offerid');

            // Make the AJAX call to the AddOfferToCart action with the combinationIds array
            $.ajax({
                url: '@Url.Action("AddOfferToCart")', // Adjust the URL as per your route
                type: 'POST',
                data: {
                    combinationIds: combinationIds, // Pass the array of combinationIds
                    productId: productId,
                    offerId: offerId
                },
                success: function (response) {
                    // If the response is true, show the modal with id 'addedToCartModal'
                    if (response === true) {
                        $('#addedToCartModal').modal('show');
                    } else {
                        alert("حدث خطأ أثناء إضافة العرض.");
                    }
                },
                error: function () {
                    console.error('An error occurred while adding the offer to the cart.');
                }
            });
        }



</script>