@using Microsoft.AspNetCore.Mvc.TagHelpers
@model ProductDTO
@{
    Layout = "_AdminLayout";
    ViewData["Title"] = "حذف منتج";
}
    <h2 class="text-end mb-3">حذف التصنيف</h2>
<form asp-action="Delete" method="post" enctype="multipart/form-data">


    <div asp-validation-summary="ModelOnly" class="text-danger arabic-direction"></div>

    <input type="hidden" asp-for="RegDate" />
    <input type="hidden" asp-for="MainImageUrl" />
    <input type="hidden" asp-for="IconImageUrl" />
    <input type="hidden" asp-for="ProductImages" />
    <nav>
        <div class="nav nav-tabs" id="nav-tab" role="tablist">
            <a class="nav-link fw-bolder active" id="nav-item-details-tab" data-bs-toggle="tab" href="#nav-item-details" role="tab" aria-controls="nav-item-details" aria-selected="true">بيانات المنتج</a>
            <a class="nav-link fw-bolder" id="nav-item-images-tab" data-bs-toggle="tab" href="#nav-item-images" role="tab" aria-controls="nav-item-images" aria-selected="false">صور المنتج</a>
            <a class="nav-link fw-bolder" id="nav-item-properties-tab" data-bs-toggle="tab" href="#nav-item-properties" role="tab" aria-controls="nav-item-properties" aria-selected="false">خصائص المنتج</a>
            <a class="nav-link fw-bolder" id="nav-item-offers-tab" data-bs-toggle="tab" href="#nav-item-offers" role="tab" aria-controls="nav-item-offers" aria-selected="false">عروض القطع</a>
            <a class="nav-link fw-bolder" id="nav-item-related-products-tab" data-bs-toggle="tab" href="#nav-item-related-products" role="tab" aria-controls="nav-item-related-products" aria-selected="false">المنتجات المتعلقة</a>
            <a class="nav-link fw-bolder" id="nav-item-videos-tab" data-bs-toggle="tab" href="#nav-item-videos" role="tab" aria-controls="nav-item-videos" aria-selected="false">فيديوهات المنتج</a>
        </div>
    </nav>
    <div class="tab-content" id="nav-tabContent">
        <div class="tab-pane fade show active" id="nav-item-details" role="tabpanel" aria-labelledby="nav-item-details-tab">

            <span asp-validation-for="ArbName" class="text-danger d-block arabic-direction"></span>
            <span asp-validation-for="Price" class="text-danger d-block arabic-direction"></span>
            <span asp-validation-for="DiscountPrice" class="text-danger d-block arabic-direction"></span>
            <span asp-validation-for="EngName" class="text-danger d-block arabic-direction"></span>
            <span asp-validation-for="EngName" class="text-danger d-block arabic-direction"></span>
            <span asp-validation-for="Categories" class="text-danger d-block arabic-direction"></span>
            <span asp-validation-for="SubCategories" class="text-danger d-block arabic-direction"></span>
            <span asp-validation-for="ArbDescription" class="text-danger d-block arabic-direction"></span>
            <span asp-validation-for="EngDescription" class="text-danger d-block arabic-direction"></span>

            <div class="row mb-3 pt-1 px-2">
                <div class="col-md-4">
                    <label asp-for="ArbName" class="form-label w-100 arabic-direction"></label>
                    <input type="text" asp-for="ArbName" class="form-control" placeholder="اضف اسم المنتج" readonly>
                </div>
                <div class="col-md-4">
                    <label asp-for="Price" class="form-label w-100 arabic-direction"></label>
                    <input type="text" asp-for="Price" class="form-control" onchange="UpdateCountsOfferPrice()" autocomplete="off" placeholder="اضف سعر المنتج" readonly>
                </div>
                <div class="col-md-4">
                    <label asp-for="DiscountPrice" class="form-label w-100 arabic-direction"></label>
                    <input type="text" asp-for="DiscountPrice" class="form-control" placeholder="اضف سعر المنتج بعد الخصم" readonly>
                </div>
            </div>
            <div class="row mb-3 pt-1 px-2">
                <div class="col-md-4">
                    <label asp-for="EngName" class="form-label w-100 arabic-direction"></label>
                    <input type="text" asp-for="EngName" class="form-control text-start" placeholder="Place Your Product Name" readonly>
                </div>
                <div class="col-md-4">
                    <label asp-for="Categories" class="form-label w-100 arabic-direction"></label>
                    <select asp-for="SelectedCategories" asp-items="ViewBag.Categories" class="form-select select2" onchange="getSubCategories();" multiple disabled>
                        @* <option selected disabled>-- اختر --</option> *@
                    </select>
                </div>
                <div class="col-md-4">
                    <label asp-for="SubCategories" class="form-label w-100 arabic-direction"></label>
                    <select asp-for="SelectedSubCategories" asp-items="ViewBag.SubCategories" class="form-select select2" multiple disabled>
                        @* <option selected disabled>-- اختر --</option> *@
                    </select>
                </div>

                <table id="CategorisTable" class="table table-striped text-center d-none">
                    <thead class="table-light">
                        @await Html.PartialAsync("_CategorisHeaderPartial")
                    </thead>
                    <tbody>
                        @if (Model?.Categories != null && Model.Categories.Count() > 0)
                        {
                            foreach (var category in Model.Categories)
                            {

                                @await Html.PartialAsync("_CategoriesFormPartial", category)
                            }

                        }
                    </tbody>
                </table>
                <table id="SubCategorisTable" class="table table-striped text-center d-none">
                    <thead class="table-light">
                        @await Html.PartialAsync("_CategorisHeaderPartial")
                    </thead>
                    <tbody>
                        @if (Model?.SubCategories != null && Model.SubCategories.Count() > 0)
                        {
                            foreach (var subCategory in Model.SubCategories)
                            {

                                @await Html.PartialAsync("_SubCategoriesFormPartial", subCategory)
                            }

                        }
                    </tbody>
                </table>
            </div>

            <div class="row mb-3 pt-1 px-2">
                <div class="col">
                    <label asp-for="ArbDescription" class="form-label w-100 arabic-direction" ></label>
                    <textarea asp-for="ArbDescription" class="texteditor" readonly>
            </textarea>
                </div>
            </div>
            <div class="row mb-3 pt-1 px-2">
                <div class="col">
                    <label asp-for="EngDescription" class="form-label w-100 arabic-direction"></label>
                    <textarea asp-for="EngDescription" class="texteditor" readonly>
            </textarea>
                </div>
            </div>


            <a class="btn btn-primary continue">التالي</a>
        </div>
        <div class="tab-pane fade" id="nav-item-images" role="tabpanel" aria-labelledby="nav-item-images-tab">
            @* <div class="row mb-3">
                <div class="col text-center">
                    <label for="image-upload" class="form-label">رفع صور المنتج <br /> يمكنك رقع أكثر من ملف في نفس الوقت</label>
                    <br>
                    <input type="file" id="image-upload" name="files" class="form-control d-inline-block w-auto" accept=".jpg, .jpeg, .png" onchange="handleProductImages(this.files)" multiple>
                    <br>
                    <button type="button" onclick="document.getElementById('image-upload').click();" class="btn btn-primary mt-2">رفع</button>
                    <br>
                </div>
            </div> *@
            <div class="row mb-3">
                <div id="mainImageSelector" class="my-2 d-flex flex-wrap justify-content-center mt-4">
                    @if (Model?.ProductImages != null)
                    {
                        foreach (var image in Model?.ProductImages)
                        {
                            if (image.ImageUrl == Model?.MainImageUrl)
                            {

                                <div class="img-container selected-border" data-file-name="@image.ImageUrl">
                                    <img src="@Url.Content($" /{ImagesPathes.Products}{image.ImageUrl}")" class="formImg img-thumbnail d-block">
                                    @* <button type="button" class="remove-btn btn btn-danger w-100" onclick="removeImageFromDivs('@image.ImageUrl')">حذف</button> *@
                                </div>
                            }
                            else
                            {
                                <div class="img-container" data-file-name="@image.ImageUrl">
                                    <img src="@Url.Content($" /{ImagesPathes.Products}{image.ImageUrl}")" class="formImg img-thumbnail d-block">
                                    @* <button type="button" class="remove-btn btn btn-danger w-100" onclick="removeImageFromDivs('@image.ImageUrl')">حذف</button> *@
                                </div>

                            }
                        }
                    }
                </div>
            </div>

            <a class="btn btn-primary back">رجوع</a>
            <a class="btn btn-primary continue">التالي</a>
        </div>
        <div class="tab-pane fade" id="nav-item-properties" role="tabpanel" aria-labelledby="nav-item-properties-tab">

            <div class="row mb-3 pt-1 px-2">
                <div class="col-md-4">
                    <div class="row my-1">
                        <div class="col-9">
                            <label asp-for="ReneweInWarehouse" class="arabic-direction w-100"></label>
                        </div>
                        <div class="col-3 arabic-direction">
                            <label asp-for="ReneweInWarehouse" class="switch">
                                <input asp-for="ReneweInWarehouse" type="checkbox" disabled>
                                <span class="slider"></span>
                            </label>
                        </div>
                    </div>

                </div>


                <div class="col-md-4">
                    <div class="row my-1">
                        <div class="col-9">
                            <label asp-for="CustomersReviews" class="arabic-direction w-100"></label>
                        </div>
                        <div class="col-3 arabic-direction">
                            <label asp-for="CustomersReviews" class="switch">
                                <input asp-for="CustomersReviews" type="checkbox">
                                <span class="slider"></span>
                            </label>
                        </div>
                    </div>

                </div>

                <div class="col-md-4">
                    <div class="row my-1">
                        <div class="col-md-3">
                            <label asp-for="VisitorsCount" class="form-label w-100 arabic-direction"></label>
                        </div>
                        <div class="col-md-9">
                            <input type="text" asp-for="VisitorsCount" class="form-control text-start arabic-direction" readonly>
                        </div>
                    </div>
                </div>

            </div>


            <div class="row mb-3 pt-1 px-2">
                <div class="col-md-4">
                    <div class="row my-1">
                        <div class="col-9">
                            <label asp-for="HideCartButton" class="arabic-direction w-100"></label>
                        </div>
                        <div class="col-3 arabic-direction">
                            <label asp-for="HideCartButton" class="switch">
                                <input asp-for="HideCartButton" type="checkbox" disabled>
                                <span class="slider"></span>
                            </label>
                        </div>
                    </div>

                </div>


                <div class="col-md-4">
                    <div class="row my-1">
                        <div class="col-9">
                            <label asp-for="Exchargeable" class="arabic-direction w-100"></label>
                        </div>
                        <div class="col-3 arabic-direction">
                            <label asp-for="Exchargeable" class="switch">
                                <input asp-for="Exchargeable" type="checkbox" disabled>
                                <span class="slider"></span>
                            </label>
                        </div>
                    </div>

                </div>

                <div class="col-md-4">
                    <div class="row my-1">
                        <div class="col-md-3">
                            <label asp-for="Duration" class="form-label w-100 arabic-direction"></label>
                        </div>
                        <div class="col-md-9">
                            <input type="text" asp-for="Duration" class="form-control text-start arabic-direction" readonly>
                        </div>
                    </div>
                </div>
            </div>

            <div class="row mb-3 pt-1 px-2">

                <div class="col-md-4">
                    <div class="row my-1">
                        <div class="col-9">
                            <label asp-for="Returnable" class="arabic-direction w-100"></label>
                        </div>
                        <div class="col-3 arabic-direction">
                            <label asp-for="Returnable" class="switch">
                                <input asp-for="Returnable" type="checkbox" disabled>
                                <span class="slider"></span>
                            </label>
                        </div>
                    </div>

                </div>
                <div class="col-md-4">
                    <div class="row my-1">
                        <div class="col-9">
                            <label asp-for="FreeShipping" class="arabic-direction w-100"></label>
                        </div>
                        <div class="col-3 arabic-direction">
                            <label asp-for="FreeShipping" class="switch">
                                <input asp-for="FreeShipping" type="checkbox" disabled>
                                <span class="slider"></span>
                            </label>
                        </div>
                    </div>

                </div>
            </div>
            <div class="row mb-3 pt-1 px-2">

                <div class="col-md-4">
                    <div class="row my-1">
                        <div class="col-9">
                            <label asp-for="Reviews" class="arabic-direction w-100"></label>
                        </div>
                        <div class="col-3 arabic-direction">
                            <label asp-for="Reviews" class="switch">
                                <input asp-for="Reviews" type="checkbox" disabled>
                                <span class="slider"></span>
                            </label>
                        </div>
                    </div>
                </div>

            </div>

            <div class="row mb-3 pt-1 px-2">
                <h5 class="text-end my-3">المتغيرات</h5>
                <div class="VariablesFormContainer my-2">
                    
                </div>
                <table id="VariableTable" class="table table-striped text-center">
                    <thead class="table-light">
                        @await Html.PartialAsync("_VariablesHeaderPartial")
                    </thead>
                    <tbody>
                        @if (Model?.ProductVariables != null && Model.ProductVariables.Count() > 0)
                        {
                            foreach(var variable in Model.ProductVariables)
                            {

                                @await Html.PartialAsync("_VariablesFormPartial", variable)
                            }

                        }
                    </tbody>
                </table>


            </div>
            <!-- Form for adding variable values -->
            <div class="row mt-3">
                <h5 class="text-end my-3">قيمة المتغيرات</h5>
                <div class="row my-2" id="AddVariableValueFormContainer">
                    
                </div>
                <div class="row mt-3">

                    <!-- Table for storing the variable values -->
                    <table id="VariableValuesTable" class="table table-striped">
                        <thead>
                            @await Html.PartialAsync("_VariableValuesHeaderPartial")
                        </thead>
                        <tbody>
                            <!-- All variable values will be appended here -->
                            @if (Model?.ProductVariableValues != null && Model.ProductVariableValues.Count() > 0)
                            {
                                foreach (var VariableValue in Model.ProductVariableValues)
                                {

                                    @await Html.PartialAsync("_VariableValuesFormPartial", VariableValue)
                                }

                            }
                        </tbody>
                    </table>
                    <!-- Hidden field to store variable values -->
                    @* <input type="hidden" asp-for="ProductVariableValues" /> *@
                </div>
            </div>

            <h5 class="text-end my-3">القيم</h5>
            <div id="CombinationsTableContainer">
                <table id="CombinationsTable" class="table table-striped">
                    <thead>
                        @await Html.PartialAsync("_CombinationsHeaderPartial")
                    </thead>
                    <tbody>
                        <!-- Combinations will be added here dynamically -->
                        @if (Model?.VariableCombinations != null && Model.VariableCombinations.Count() > 0)
                        {
                            foreach (var combination in Model.VariableCombinations)
                            {

                                @await Html.PartialAsync("_VariableCombinationFormPartial", combination)
                            }

                        }
                    </tbody>
                </table>
            </div>

            <a class="btn btn-primary back">رجوع</a>
            <a class="btn btn-primary continue">التالي</a>
        </div>
        <div class="tab-pane fade" id="nav-item-offers" role="tabpanel" aria-labelledby="nav-item-offers-tab">

            <div class="row mb-3 pt-1 px-2">
                <div class="col-md-4">
                    <div class="row my-1">
                        <div class="col-9">
                            <label asp-for="EnableProductCountsOffers" class="arabic-direction w-100"></label>
                        </div>
                        <div class="col-3 arabic-direction">
                            <label asp-for="EnableProductCountsOffers" class="switch">
                                <input asp-for="EnableProductCountsOffers" type="checkbox" disabled>
                                <span class="slider"></span>
                            </label>
                        </div>
                    </div>

                </div>
            </div>
            <div class="row mb-3 pt-1 px-2">

                <table id="CountOffersTable" class="table table-striped text-center">
                    <thead class="table-light">
                        @await Html.PartialAsync("_ProductOffersHeaderPartial")
                    </thead>
                    <tbody>
                        @if (Model?.ProductCountsOffers != null && Model.ProductCountsOffers.Count() > 0)
                        {
                            foreach (var offer in Model.ProductCountsOffers)
                            {

                                @await Html.PartialAsync("_ProductOffersFormPartial", offer)
                            }

                        }
                    </tbody>
                </table>
            </div>
            <a class="btn btn-primary back">رجوع</a>
            <a class="btn btn-primary continue">التالي</a>
        </div>
        <div class="tab-pane fade" id="nav-item-related-products" role="tabpanel" aria-labelledby="nav-item-related-products-tab">

            <div class="row mb-3 pt-1 px-2">
                <div class="col-md-4">
                    <div class="row my-1">
                        <div class="col-9">
                            <label asp-for="EnableRelatedProducts" class="arabic-direction w-100"></label>
                        </div>
                        <div class="col-3 arabic-direction">
                            <label asp-for="EnableRelatedProducts" class="switch">
                                <input asp-for="EnableRelatedProducts" type="checkbox" disabled>
                                <span class="slider"></span>
                            </label>
                        </div>
                    </div>

                </div>
            </div>

            <div class="row mb-3 pt-1 px-2">

                <table id="RelatedProductsTable" class="table table-striped text-center">
                    <thead class="table-light">
                        @await Html.PartialAsync("_RelatedProductsHeaderPartial")
                    </thead>
                    <tbody>
                    </tbody>
                </table>
            </div>


            <a class="btn btn-primary back">رجوع</a>
            <a class="btn btn-primary continue">التالي</a>
        </div>
        <div class="tab-pane fade" id="nav-item-videos" role="tabpanel" aria-labelledby="nav-item-videos-tab">

            @* <div class="row mb-3 pt-1 px-2">
                <div class="col-md-4">
                    <div class="row my-1">
                        <div class="col-9">
                            <label asp-for="EnableProductVideos" class="arabic-direction w-100"></label>
                        </div>
                        <div class="col-3 arabic-direction">
                            <label asp-for="EnableProductVideos" class="switch">
                                <input asp-for="EnableProductVideos" type="checkbox" checked>
                                <span class="slider"></span>
                            </label>
                        </div>
                    </div>

                </div>
            </div> *@

            <div class="VideosFormContainer my-2">
                
            </div>
            <table id="videosTable" class="table table-striped text-center">
                <thead class="table-light">
                    @await Html.PartialAsync("_VideosHeaderPartial")
                </thead>
                <tbody>
                    @if (Model?.ProductVideos != null && Model.ProductVideos.Count() > 0)
                    {
                        foreach (var video in Model.ProductVideos)
                        {

                            @await Html.PartialAsync("_VideosFormPartial", video)
                        }

                    }
                </tbody>
            </table>


            <a class="btn btn-primary back">رجوع</a>
            <button type="submit" class="btn btn-danger savebtn">حذف</button>
        </div>
    </div>
</form>

<script>
    // function getSubCategories() {
    //     var categoryIdValue = $('#CategoryId').val();
    //     var subCategoriesSelect = $('#SubCategoryId');

    //     if (categoryIdValue != null && categoryIdValue != 0) {
    //         $.ajax({
    //             url: '@Url.Action("GetSubCategories")',
    //             type: 'GET',
    //             data: {
    //                 categoryId: categoryIdValue
    //             },
    //             success: function (data) {
    //                 subCategoriesSelect.empty();
    //                 var currentItemUnitId = data.subCategories[0].id;
    //                 data.subCategories.forEach(function (subCategory) {
    //                     subCategoriesSelect.append('<option value="' + subCategory.id + '">' + subCategory.text + '</option>');
    //                 });

    //                 // Refresh select2 to reflect the new options
    //                 updateSelect2();

    //             },
    //             error: function (xhr, status, error) {
    //                 console.error("Error loading Sub Categories: " + error);
    //                 subCategoriesSelect.empty();
    //             }
    //         });
    //     }
    // }

    function getSubCategories() {
        // Get the selected category IDs
        // var selectedCategoryIds = $('#Categories').val();
        var selectedCategoryIds = $('#SelectedCategories').val();

        // Make an AJAX request to get subcategories for the selected categories
        $.ajax({
            url: '@Url.Action("GetSubCategories")', // Controller action to fetch subcategories
            type: 'GET',
            data: { categoryIds: selectedCategoryIds }, // Send categoryIds as an array of ints
            traditional: true, // Ensure that jQuery sends the array as multiple parameters
            success: function (response) {
                updateSubCategoryList(response, selectedCategoryIds);
            },
            error: function (xhr, status, error) {
                console.error("Error fetching subcategories:", error);
            }
        });
    }


    function updateSubCategoryList(subcategories, selectedCategoryIds) {
        var subCategorySelect = $('#SelectedSubCategories'); // Subcategory dropdown selector

        // Log the subcategories to ensure the data structure is correct
        

        // Loop through the subcategories and add them to the select dropdown if not already present
        subcategories.forEach(function (subcategory) {
            // Check if the subcategory is already in the list
            if (!subCategorySelect.find('option[value="' + subcategory.id + '"]').length) {
                // If not, create a new option and append it
                var newOption = new Option(subcategory.name, subcategory.id);
                subCategorySelect.append(newOption);
            }
        });

        // Now remove any options that are no longer part of the selected categories
        subCategorySelect.find('option').each(function () {
            var subcategoryId = $(this).val();
            var shouldRemove = true;

            // Check if this subcategory should remain based on the selected categories
            for (var i = 0; i < subcategories.length; i++) {
                if (subcategoryId == subcategories[i].id) {
                    shouldRemove = false;
                    break;
                }
            }

            // Remove the subcategory if it's not in the current selection
            if (shouldRemove) {
                $(this).remove();
            }
        });

        // After making changes, re-initialize Select2 to ensure it reflects the new options
        subCategorySelect.trigger('change'); // Trigger the change event for Select2
        subCategorySelect.select2(); // Re-initialize Select2 on the select element

        // Alternatively, you can just trigger the change event to refresh Select2:
        // subCategorySelect.trigger('change.select2');
    }

    function AddVariable() {
        var VariableName = $("#VariableName");
        var VariableNameValue = VariableName.val().trim(); // Trim to avoid leading/trailing spaces

        if (VariableNameValue !== "") {
            // Check if the variable already exists in the table
            var VariableExists = false;

            // Loop through rows in the tbody of VariableTable
            $('#VariableTable tbody tr').each(function () {
                var rowVariableName = $(this).find('.Name').val().trim(); // Get the value of the input field with the 'Name' class
                if (rowVariableName === VariableNameValue) {
                    VariableExists = true;
                    return false; // Break out of the loop once a match is found
                }
            });

            // If variable doesn't exist, make an AJAX request
            if (!VariableExists) {
                $.ajax({
                    url: '@Url.Action("GetVariableRow")',
                    type: 'GET',
                    data: {
                        VariableName: VariableNameValue
                    },
                    success: function (result) {
                        // Append the new row for the variable to the VariableTable
                        $('#VariableTable tbody').append(result);

                        // Add the new variable to the select dropdown for variable values
                        var variableId = result.Id; // Assuming the result includes an 'Id' property
                        var variableOption = `<option value="${variableId}">${VariableNameValue}</option>`;
                        $('#SelectVariable').append(variableOption); // Add the new option to the select dropdown

                        // Append a table for variable values for this new variable
                        var newVariableValuesHtml = `
                                                                                            <table id="VariableValuesTable_${variableId}" class="table table-striped">
                                                                                                <thead>
                                                                                                    <tr><th>قيمة المتغير</th><th>إجراء</th></tr>
                                                                                                </thead>
                                                                                                <tbody></tbody>
                                                                                            </table>
                                                                                        `;
                        $('#VariableValuesContainer').append(newVariableValuesHtml);

                        // Recalculate if necessary
                        rowCalc();

                        // Clear the input field for the variable name
                        VariableName.val('');
                    },
                    error: function (xhr, status, error) {
                        console.error("Error loading Get Variable Row: " + error);
                    }
                });
            }
        }
    }



    let selectedVariables = {};  // Object to store selected variables and their values

    function AddVariableValue() {
        var variableId = $("#SelectVariable").val();  // Get selected variable ID
        var variableName = $("#SelectVariable option:selected").text();  // Get selected variable name
        var variableValue = $("#VariableValue").val().trim();  // Get the value inputted by the user

        // Check if both variable and value are valid
        if (variableId && variableValue) {
            // Check if the value already exists for the selected variable
            if (selectedVariables[variableName] && selectedVariables[variableName].includes(variableValue)) {
                alert("This value has already been added for the selected variable.");
                return;  // Exit if the value is a duplicate
            }

            $.ajax({
                url: '@Url.Action("GetVariableValueRow")',
                type: 'GET',
                data: {
                    variableId: variableId,
                    variableName: variableName,
                    variableValue: variableValue
                },
                success: function (result) {
                    // Append the new row for the variable to the VariableTable
                    $('#VariableValuesTable tbody').append(result);

                    // Optionally, clear the value input field
                    $("#VariableValue").val('');

                    // Store the selected variable value
                    if (!selectedVariables[variableName]) {
                        selectedVariables[variableName] = [];  // Initialize array if not already
                    }
                    selectedVariables[variableName].push(variableValue);  // Add the new value to the list

                    // Debug log to verify the selected variables
                    console.log(selectedVariables);

                    // Update combinations after adding a new variable value
                    generateCombinations();

                    // Optionally, append the variable and its value to a hidden input for form submission
                    var existingValues = $("#ProductVariableValues").val();
                    var newVariableValue = JSON.stringify({
                        Value: variableValue,
                        ProductVariableId: variableId
                    });

                    // If there are already values, append the new one; otherwise, start the list
                    if (existingValues) {
                        existingValues = JSON.parse(existingValues);
                        existingValues.push(JSON.parse(newVariableValue));
                    } else {
                        existingValues = [JSON.parse(newVariableValue)];
                    }

                    // Update the hidden input with the updated list of variable values
                    $("#ProductVariableValues").val(JSON.stringify(existingValues));
                    rowCalc();
                },
                error: function (xhr, status, error) {
                    console.error("Error loading Get Variable value Row: " + error);
                }
            });


        } else {
            alert("Please select a variable and enter a value.");
        }
    }


    // Function to delete a variable value row
    // Function to delete a variable value row
    function deleteVariableRow(button) {
        // Get the variable name to be deleted
        var variableName = $(button).closest('tr').find('.Name').val().trim(); // Assuming the input field with class 'Name' contains the variable name

        // Remove the variable and its values from the selectedVariables object
        if (selectedVariables[variableName]) {
            delete selectedVariables[variableName]; // Delete the entire variable entry from selectedVariables
        }

        // Remove the row from the VariablesTable
        $(button).closest('tr').remove();

        // Also remove the option from the SelectVariable dropdown
        $('#SelectVariable option').each(function () {
            if ($(this).text() === variableName) {
                $(this).remove();
            }
        });

        // Remove only the rows from the VariableValuesTable that correspond to the deleted variable name
        $('#VariableValuesTable tbody tr').each(function () {
            var rowVariableName = $(this).find('.Name').val().trim();  // Fix: Use `.val()` instead of `.value()`
            if (rowVariableName === variableName) {
                $(this).remove();  // Remove the row if the variable name matches
            }
        });

        // Regenerate combinations after the deletion
        generateCombinations();

        // Optionally, also check if the selectedVariables object is empty and clear combinations
        if (Object.keys(selectedVariables).length === 0) {
            $("#CombinationsTable tbody").empty();
        }
    }





    // Function to generate combinations of selected variable values
    function generateCombinations() {
        let variables = Object.keys(selectedVariables);  // Get all variable names (like Color, Size)
        let values = Object.values(selectedVariables);   // Get all values for each variable

        // If no variables have been selected, exit early
        if (variables.length === 0) return;

        // Generate combinations (Cartesian product of variable values)
        let combinations = getCombinations(values);

        // Empty the combinations table before adding new combinations
        $("#CombinationsTable tbody").empty();

        // Loop through each combination and add to the table
        combinations.forEach((combination, index) => {
            // Store the row data for the combination (variable name and value) in a variable
            let combinationText = variables.map((varName, index) => {
                return `${varName}: ${combination[index]}`;
            }).join(', ');  // This will store the string like "Color: Red, Size: Small"


            $.ajax({
                url: '@Url.Action("GetVariableCombinationRow")',
                type: 'GET',
                data: {
                    CombinationText: combinationText
                },
                success: function (result) {
                    // Append the new row for the variable to the VariableTable
                    $('#CombinationsTable tbody').append(result);


                    rowCalc();
                },
                error: function (xhr, status, error) {
                    console.error("Error loading Get Variable value Row: " + error);
                }
            });

            // Now use the stored 'combinationText' in the HTML generation
            // let combinationRowHtml = `
            //     <tr>
            //         <td class="rowNumber text-center" colspan="1">${index + 1}</td>
            //         <td colspan="6">${combinationText}</td>  <!-- Using the stored 'combinationText' variable here -->
            //         <td colspan="2"><input type="number" class="form-control" name="StockCount_${combination.join('_')}" /></td>
            //         <td colspan="2"><input type="number" class="form-control" name="Price_${combination.join('_')}" /></td>
            //     </tr>
            // `;

        });
    }


    // Function to generate Cartesian product (all combinations of variable values)
    function getCombinations(arrays) {
        return arrays.reduce(function (a, b) {
            return a.flatMap(function (d) {
                return b.map(function (e) {
                    return d.concat([e]);
                });
            });
        }, [[]]);
    }

    // Function to delete a combination row
    function deleteCombinationRow(button) {
        $(button).closest('tr').remove();  // Remove the row when the delete button is clicked
    }

    function deleteVariableValueRow(button) {
        // Get the variable name and value from the row to be deleted
        var variableName = $(button).closest('tr').find('input[id*="VariableName"]').val().trim(); // Get the variable name
        var variableValue = $(button).closest('tr').find('.value').val().trim(); // Get the value to delete

        console.log('Before deletion, selectedVariables:', JSON.stringify(selectedVariables));

        // Check if the variable exists in selectedVariables and remove the value
        if (selectedVariables[variableName]) {
            // Make sure variableValue and selectedValues are of the same type (string, number, etc.)
            selectedVariables[variableName] = selectedVariables[variableName].filter(value => value.toString().trim() !== variableValue.toString().trim());

            // If no values are left for this variable, delete the variable entry
            if (selectedVariables[variableName].length === 0) {
                delete selectedVariables[variableName];
            }
        }

        console.log('After deletion, selectedVariables:', JSON.stringify(selectedVariables));  // Check if it's updated correctly

        // Remove the row from the VariableValuesTable
        $(button).closest('tr').remove();

        // Regenerate combinations after the deletion
        generateCombinations();  // Regenerate combinations

        // Optionally, clear combinations if selectedVariables is empty
        if (Object.keys(selectedVariables).length === 0) {
            $("#CombinationsTable tbody").empty();  // Clear combinations if no variables are left
        }
    }


    function AddCountsOfferRow() {
        // Parse values to float or set to 0 if invalid
        var price = parseFloat($("#OfferPrice").val()) || 0;
        var count = parseFloat($("#OfferCount").val()) || 0;
        var itemPrice = parseFloat($("#Price").val()) || 0;

        // Format both values to two decimal places
        price = price.toFixed(2);
        itemPrice = itemPrice.toFixed(2);

        // Ensure that price and count are not null or empty
        if (!price || !count) {
            alert("Please provide both price and count values.");
            return;  // Exit the function if either is empty or invalid
        }

        // Check if price is a valid number and not less than 0
        if (price < 0) {
            alert("Price must be a valid number and cannot be less than 0.");
            return; // Exit the function if price is invalid
        }

        // Check if the count already exists in the table
        var countExists = false;
        $('#CountOffersTable tbody tr').each(function () {
            var existingCount = $(this).find('input.count').val().trim();
            if (existingCount === count) {
                countExists = true;
                return false; // Exit loop early if count is found
            }
        });

        if (countExists) {
            alert("This count already exists in the table.");
            return; // Exit the function if the count already exists
        }

        // Proceed with the AJAX call if validations pass
        $.ajax({
            url: '@Url.Action("GetCountsOfferRow")',
            type: 'GET',
            data: {
                count: count,
                price: price,
            },
            success: function (result) {
                // Append the new row for the count offer to the table
                $('#CountOffersTable tbody').append(result);

                // Calculate the discount
                var discount = (count * itemPrice) - price;

                // If the discount is less than 0, set it to 0
                if (discount < 0) {
                    discount = 0;
                }

                // Find the last input with class "discount" and set its value to the calculated discount, formatted to 2 decimal places
                $('#CountOffersTable tbody tr:last').find('input.discount').val(discount.toFixed(2));
                $('#OfferCount').val('');
                $('#OfferPrice').val('');

                // Call the rowCalc function after appending the row
                rowCalc();
            },
            error: function (xhr, status, error) {
                console.error("Error loading Get Counts Offer Row: " + error);
            }
        });
    }
    function AddRelatedProduct() {
        var productId = $("#RelatedProductId").val();

        if (!productId) {
            return;  // Exit the function if either is empty or invalid
        }

        $.ajax({
            url: '@Url.Action("GetRelatedProductRow")',
            type: 'GET',
            data: {
                productId: productId
            },
            success: function (result) {
                // Append the new row for the count offer to the table
                $('#RelatedProductsTable tbody').append(result);

                getRelatedProducts();


                // Call the rowCalc function after appending the row
                rowCalc();
            },
            error: function (xhr, status, error) {
                console.error("Error loading Get Counts Offer Row: " + error);
            }
        });
    }

    function AddVideo() {
        var videoUrl = $("#VideoUrl").val();

        // Check if the videoUrl is not empty
        if (!videoUrl) {
            alert("Please provide a valid video URL.");
            return;  // Exit the function if the URL is empty
        }

        // Regular expression to validate the URL format
        var urlPattern = /^(https?:\/\/)?([a-z0-9]+[.-])*[a-z0-9]+\.[a-z]{2,6}(\/.*)?$/i;

        // Test if the URL matches the pattern
        if (!urlPattern.test(videoUrl)) {
            alert("Please provide a valid video URL.");
            $("#VideoUrl").val('');
            return;  // Exit the function if the URL is invalid
        }

        // Check if the video URL is already in the table to prevent duplicates
        var isUrlAlreadyAdded = false;
        $('#videosTable tbody tr').each(function () {
            var existingUrl = $(this).find('td.videoUrl').text().trim()
            if (existingUrl === videoUrl) {
                isUrlAlreadyAdded = true;
                return false; // Exit the loop if the URL is found
            }
        });

        if (isUrlAlreadyAdded) {
            alert("This video URL has already been added.");
            $("#VideoUrl").val('');
            return; // Exit the function if the URL is already in the table
        }

        // If valid and not duplicate, proceed with the AJAX request
        $.ajax({
            url: '@Url.Action("GetvideoUrlRow")',
            type: 'GET',
            data: {
                videoUrl: videoUrl
            },
            success: function (result) {
                // Append the new row for the video to the table
                $('#videosTable tbody').append(result);

                // Call the rowCalc function after appending the row
                rowCalc();
                $("#VideoUrl").val('');
            },
            error: function (xhr, status, error) {
                console.error("Error loading Get video Row: " + error);
            }
        });
    }




    function getRelatedProducts() {
        // Collect all productId values from the table rows
        var selectedProductIds = [];
        $('#myTable tbody tr').each(function () {
            var productId = $(this).find('input.productId').val();
            if (productId) {
                selectedProductIds.push(productId); // Add the productId to the array if it's not empty
            }
        });

        // If no productIds are selected, do nothing (optional check)
        if (selectedProductIds.length === 0) {
            console.log('No products selected');
            return; // Exit the function if no productIds are found
        }

        // Make an AJAX request to get related products
        $.ajax({
            url: '@Url.Action("GetRelatedProducts")',
            type: 'GET',
            data: { productIds: selectedProductIds },
            traditional: true, // Ensure that jQuery sends the array as multiple parameters
            success: function (response) {
                updateRelatedProductsList(response, selectedProductIds);
            },
            error: function (xhr, status, error) {
                console.error("Error fetching related products:", error);
            }
        });
    }



    function updateRelatedProductsList(relatedProducts, selectedProductIds) {
        var RelatedProductsSelect = $('#RelatedProductId');

        // Clear the existing options first to update the select values
        RelatedProductsSelect.empty();

        // Loop through the related products and add them to the select dropdown
        relatedProducts.forEach(function (product) {
            // Create a new option and append it
            var newOption = new Option(product.arbName, product.id);
            RelatedProductsSelect.append(newOption);
        });

        // After making changes, re-initialize Select2 to ensure it reflects the new options
        RelatedProductsSelect.select2();

        // Trigger the change event to update the Select2 display
        RelatedProductsSelect.trigger('change');
    }





    function UpdateCountsOfferPrice() {
        // Get the item price and ensure it's a valid number
        var itemPrice = parseFloat($("#Price").val()) || 0;

        // Loop through each row in the table
        $('#CountOffersTable tbody tr').each(function () {
            // Get the count and price values for this row
            var count = parseFloat($(this).find('input.count').val()) || 0;
            var price = parseFloat($(this).find('input.price').val()) || 0;

            // Calculate the discount
            var discount = (count * itemPrice) - price;

            // If the discount is less than 0, set it to 0
            if (discount < 0) {
                discount = 0;
            }

            // Set the discount value to the input with class "discount" and ensure it's formatted to 2 decimal places
            $(this).find('input.discount').val(discount.toFixed(2));
        });
    }





</script>

<script>
    document.addEventListener("DOMContentLoaded", (event) => {
        updateRelatedProductsList();
        rowCalc();
        UpdateCountsOfferPrice();

    });
</script>

@* @section Scripts {
    @{
            <partial name="_ValidationScriptsPartial" />
    }
} *@
